---
description: TypeScript 严格模式、路径别名与 React 19 约定
globs: "*.ts,*.tsx"
---
# TypeScript 严格模式与路径别名

- **严格模式**：默认在 `tsconfig.json` 启用 `strict`。新增类型需完整声明，避免使用 `any`，优先 `unknown` 或范型。
- **显式导出类型**：公共 API 必须显式注解函数签名与返回类型；避免隐式导出推断。
- **路径别名**：使用 `@/*` 指向 `src/*`。示例：
  - `import { cn } from '@/utils/cn'`
  - `import { Button } from '@/components/ui/button'`
- **React 19 相关**：
  - 优先函数组件与 Hooks；组件 props、局部 state、上下文值均需类型。
  - 合理使用 Actions、`useOptimistic`、`useFormStatus`、`use` 等能力，注意定义请求与响应类型。
- **导入顺序**：React → 第三方 → 本地（类型、组件、工具）。

---
globs: *.ts,*.tsx
description: TypeScript 严格模式、路径别名与 React 19 约定
---
## TypeScript 与路径别名

- **严格模式**：`tsconfig.json` 已启用 `strict: true`。新增类型时避免使用 `any`，优先 `unknown`、字面量类型、联合类型、枚举或对象字面量。
- **目标与库**：保持 `target` 为 `ES2020`，`lib` 包含 `DOM`, `DOM.Iterable`, `ES2020`，以兼容扩展运行时与异步迭代。
- **路径别名**：使用 `@/*` 指向 `src/*`，在 TS 与 Rspack 均已配置。新增文件请使用绝对导入。
- **React 19**：采用自动 JSX 运行时与函数式组件。Props 与返回值必须显式声明：

```ts
interface MyComponentProps { title: string; count?: number }
export const MyComponent: React.FC<MyComponentProps> = ({ title, count }) => (
  <h1>{title} {count ?? 0}</h1>
);
```

- **工具函数**：遵循 `src/utils/` 下的命名与导出风格。例如 `cn` 返回 `string`，不可返回 `unknown`。

